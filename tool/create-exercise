#!/usr/bin/env dart
// vim: set syntax=dart:

import "dart:io";
import "dart:async";
import "package:args/args.dart";

/** Constants */
const ME = "create-exercise";

final parser = new ArgParser()..addSeparator("Usage: $ME <slug>");

/** Helpers */
List<String> words(String str) {
  return str
      .toLowerCase()
      .replaceAll(new RegExp(r"[^a-z0-9]"), " ")
      .replaceAll(new RegExp(r"\ +"), " ")
      .trim()
      .split(" ");
}

String upperFirst(String str) {
  final chars = str.split("");
  final first = chars.first;

  return first.toUpperCase() + chars.skip(1).join("");
}

String camelCase(String str, {bool isUpperFirst = false}) {
  final parts = words(str);
  final first = parts.first;
  final rest = parts.skip(1);

  return (isUpperFirst ? upperFirst(first) : first) + rest.map(upperFirst).join("");
}

String pascalCase(String str) => camelCase(str, isUpperFirst: true);

String snakeCase(String str) => words(str).join("_");

String kebabCase(String str) => words(str).join("-");

/** Templates */
String exampleTemplate(String name) => """
class ${pascalCase(name)} {

}
""";

String mainTemplate(String name) => """
class ${pascalCase(name)} {
  // Put your code here
}
""";

String testTemplate(String name) => """
import "package:test/test.dart";
import "package:${snakeCase(name)}/${snakeCase(name)}.dart";

void main() {
  final ${camelCase(name)} = new ${pascalCase(name)}();

  group("${pascalCase(name)}", () {
    test("should work", () {
      // TODO
    });
  });
}
""";

String pubTemplate(String name) => """
name: '${snakeCase(name)}'
dev_dependencies:
  test: '<0.13.0'
""";

Future main(args) async {
  final arguments = parser.parse(args);
  final restArgs = arguments.rest;

  if (restArgs.isEmpty) {
    stderr.write(parser.usage);
    exit(1);
  }

  final name = restArgs.first;

  // Create dir
  final currentDir = Directory.current;
  final exerciseDir = new Directory("exercises/${kebabCase(name)}");
  final filename = snakeCase(name);

  if (await exerciseDir.exists()) {
    stderr.write("$name already exist");
    exit(1);
  }

  await new Directory("${exerciseDir.path}/lib").create(recursive: true);
  await new Directory("${exerciseDir.path}/test").create(recursive: true);

  // Create files
  await new File("${exerciseDir.path}/lib/example.dart").writeAsString(exampleTemplate(name));
  await new File("${exerciseDir.path}/lib/${filename}.dart").writeAsString(mainTemplate(name));
  await new File("${exerciseDir.path}/test/${filename}_test.dart").writeAsString(testTemplate(name));
  await new File("${exerciseDir.path}/pubspec.yaml").writeAsString(pubTemplate(name));

  // Install deps
  Directory.current = exerciseDir;

  final res = await Process.run("pub", ["get"], runInShell: true);

  if (!res.stdout.toString().isEmpty) {
    stdout.write(res.stdout);
  }

  if (!res.stderr.toString().isEmpty) {
    stderr.write(res.stderr);
  }

  assert(res.exitCode == 0);

  Directory.current = currentDir;
}
